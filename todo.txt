PLANNED FEATURES!!!!! YIPPEE!!!
- something for rn: work TestResult in
- a full plugin manager (yes, ambitious. but in theory very fucking simple) [NOT STARTED]

1. Test Structure & Lifecycle
- asynchronous test support (async setUp/tearDown) [NOT DONE]
- support fixtures (setup and cleanup routines for tests):
  - setUp() / tearDown(): per-test initialization and cleanup [DONE]
  - setUpClass() / tearDownClass(): one-time setup/cleanup for an entire test class [DONE]
  - beforeAll / afterAll, around each test (sync & async) [ADD TO RUNNER]

2. Parameterization & Data-Driven Testing
- parameterized / test-data driven tests (decorator) [NOT DONE]
- @patch decorator that allows you to provide data (not sure if just str | list or if i need to add others) and send it to any input for testing

3. Assertions & Performance
- built-in timing and performance assertions [ADD BENCHMARKING, TIMING/LOOP IS DONE]
- clear, human-readable failure output [DONE, -v FOR VERBOSE OUTPUT]
- support for custom assertion extensions [...MAYBE? I HAVE A ABC]
- error aggregation and traceback enhancement [WHAT IS THIS]

4. Execution Control & Test Discovery
- test discovery hooks (automatic test method collection) [DONE]
- test execution ordering controls [NOT DONE]
- parallel / concurrent test execution support [NOT DONE]
- custom test skip / retry logic [DONE @skip AND @retry]
- skip / xfail decorators or annotations [DONE @skip, NOT DONE @xfail?]

5. Extensibility & Integration
- compatibility layer for popular test frameworks [WHAT IS THIS]
- integration with mock / stub utilities [NOT DONE]
- pluggable runners and reporters [NOT DONE (see top)]
- result caching like pytest [DO THIS NEXT, SUPER FUCKING EASY]
- seamless IDE / test-runner integration [NOT DONE, FIGURE OUT HOW TF]

6. Reporting & Developer Tools
- logging capture and inspection [WHAT IS THIS]
- test metadata (custom labels, descriptions, severity levels) [WHERE DO I DO THIS]
- tagging or markers to group and filter tests [NOT DONE, CAN DO]
- test suite composition (nesting and grouping) [WHAT IS THIS]
- resource management (temporary files/directories, database fixtures) [NOT DONE, 7/10 DIFFICULTY]
- extensive documentation and examples [DIRT EASY, WILL DO LATER]
- create a domain specific lang. i want it to look like: [HARD BTW]

from ntest import describe, it, raises

# "it" returns a TestBuilder with a .run() method. this is where the action itself goes
describe("Calculator"):

  it("adds two numbers",
     params=[(1, 2, 3), (5, 7, 12)]) \
  .run(lambda a, b, expected:
     assert Calculator.add(a, b) == expected)

  it("throws on overflow") \
  .run(lambda:
     with raises(OverflowError):
       Calculator.add(10**1000, 10**1000))
